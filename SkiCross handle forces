import matplotlib.pyplot as plt
import matplotlib.animation as animation
import serial
import numpy as np
import datetime as dt
import time
import math 


# Set up the serial connection (adjust port and baudrate as needed)
arduino_port = 'COM10'  # Update with your Arduino port
baud_rate = 9600  # Make sure it matches the baud rate in your Arduino code
ser = serial.Serial(arduino_port, baud_rate)

# Create a figure and six subplots
fig, axs = plt.subplots(2, 3, figsize=(11, 1.8))  # 2 rows, 3 columns

# Flatten the axis array to iterate easily
axs = axs.flatten()

# Initialize empty lines for each subplot
lines = [ax.plot([], [])[0] for ax in axs]

start_time = int(round(time.time()*1000 ))
#start_time = dt.datetime.now().strftime('%H:%M:%S:%f')

# Set the flag to indicate that zero factor is initially met
zero_factor_met = True
initial = 0
# Variables to track peak force and corresponding time
peak_force = [0] * 6
time_to_peak = [None] * 6

 # Three directions for right side
magnitude_data_left=[]
magnitude_data_right=[]


# Custom titles for each subplot
custom_titles = [ "Vertical Direction Left", "Horizontal Direction Left", "Depth Direction Left", "Vertical Direction Right", "Horizontal Direction Right", "Depth Direction Right"]

# Function to read data from Arduino
def read_data():
    data = ser.readline().decode().strip().split(',')  # Assuming data is comma-separated
    if data:
        return list(map(float, data)) if len(data) == 6 else None  # Assuming 6 values per line

def is_around_zero(value):
    return -3 < value < 3 #    

# Function to update the plots
def update(frame):
    global zero_factor_met, initial
    global magnitude_data_left
    global magnitude_data_right
    new_data = read_data()
    current_time = int(round((time.time()*1000) - start_time))
    #current_time = dt.datetime.now().strftime('%H:%M:%S:%f')

    if new_data:
        magnitude_left=[]
        magnitude_right=[]
        for j in range(2):
            magnitude_left=np.append(magnitude_left,new_data[j])
            magnitude_right=np.append(magnitude_right,new_data[j+3])



        magnitude_data_left.append(np.sqrt(magnitude_left[0]**2+magnitude_left[1]**2))
        magnitude_data_right.append(np.sqrt(magnitude_right[0]**2+magnitude_right[1]**2))
        

        for i, line in enumerate(lines):
            xdata, ydata = line.get_data()
            xdata = np.append(xdata, current_time)
            ydata = np.append(ydata, new_data[i])

            sizex = len(xdata)
            if sizex>100:
                line.set_data(xdata[sizex-100:],ydata[sizex-100:])
            else:
                line.set_data(xdata,ydata)
            axs[i].set_ylim([-300, 300])
            
            axs[i].set_xlim([max(0, current_time - 2000.0), current_time])
            #if not zero_factor_met and not is_around_zero(new_data[i]) and i in [0, 1, 3, 4]:
            axs[i].set_title(custom_titles[i])  # Set personalized subplot title
            axs[i].set_xlabel('Time (ms)')  # X-axis title
            axs[i].set_ylabel('Force (Newtons)') # Y-axis label
            axs[i].tick_params(axis='x',labelrotation=60) 

            plt.suptitle('SKI CROSS HANDLES FORCES')
    
            

            if zero_factor_met and not is_around_zero(new_data[0]) and not is_around_zero(new_data[3]):
                print("Start the trial")
                zero_factor_met = False  # Update the flag as zero factor is no longer met
                initial = int(round(time.time()*1000 ))-start_time
                #initial = dt.datetime.now().strftime('%H:%M:%S:%f')
                print("Initial time:" , initial)

    # Check if the zero factor condition is no longer met after initially being met
            elif not zero_factor_met and is_around_zero(new_data[0]) : 
                zero_factor_met = True
                fin = int(round(time.time()*1000 ))-start_time # Set ending time
                #fin = dt.datetime.now().strftime('%H:%M:%S:%f')
                release_time = fin - initial  # Calculate release time
                # Calculate peak force during the trial duration
                trial_data = ydata[np.logical_and(xdata >= initial, xdata <= fin)]
                xdata_trial = xdata[np.logical_and(xdata >= initial, xdata <= fin)]
                
                array_magnitude_data_left = np.array(magnitude_data_left)
                array_magnitude_data_right = np.array(magnitude_data_right) 

                trial_data_left = array_magnitude_data_left[np.logical_and(xdata >= initial, xdata <= fin)]
                trial_data_right = array_magnitude_data_right[np.logical_and(xdata >= initial, xdata <= fin)]
                max_force_left = np.max(np.abs(trial_data_left))
                max_force_right = np.max(np.abs(trial_data_right))

                # Find the time to reach peak force
                index_left = np.argmax(np.abs(trial_data_left))  # Time index of peak force for left side
                index_right = np.argmax(np.abs(trial_data_right))   # Time index of peak force for right side

                time_to_peak_force_left = xdata_trial[index_left] - initial
                time_to_peak_force_right = xdata_trial[index_right] - initial

                rate_left = 1000*max_force_left/time_to_peak_force_left
                rate_right = 1000*max_force_right/time_to_peak_force_right

                print("Max force left:", max_force_left)
                print("Time to reach max force left:", time_to_peak_force_left / 1000 , "s")
                print("Rate of Force development left:", rate_left, "N/s")


                print("Max force right:", max_force_right)
                print("Time to reach max force right:", time_to_peak_force_right / 1000,"s")
                print("Rate of Force development right:", rate_right, "N/s")

                #max_force = np.max(np.abs(trial_data))


                # Find the time to reach peak force
                #index = np.argmax(np.abs(trial_data))  # Time index of peak force

                #time_to_peak_force = xdata_trial[index] -initial

                #print("Peak force:", max_force)
                #print("Time to reach peak force:", time_to_peak_force/1000)
                      
                print("Release performed in seconds:", release_time/1000)
                print("Final time:", fin)

                #plt.close()  # Close the plot window
                ser.close()  # Close the serial connection
                

                #Plot magnitude force for left and right sides

                fig_mag_release, axs_mag_release = plt.subplots(1, 2, figsize=(11, 3))
                axs_mag_release[0].plot(xdata_trial-initial,trial_data_left)
                axs_mag_release[0].set_title(" Left Side")
                axs_mag_release[0].set_xlabel('Time (ms)')
                axs_mag_release[0].set_ylabel('Force Magnitude (Newtons)')
                axs_mag_release[1].plot(xdata_trial-initial,trial_data_right)
                axs_mag_release[1].set_title("Right Side")
                axs_mag_release[1].set_xlabel('Time (ms)')
                axs_mag_release[1].set_ylabel('Force Magnitude (Newtons)')
                plt.suptitle('Magnitude forces')

                plt.tight_layout()
                plt.show()
                return lines


                   
    return lines


# Animate the plots
ani = animation.FuncAnimation(fig, update, frames=100, interval=100)  # Update every 100ms, 100 frames

plt.tight_layout()
plt.show()
